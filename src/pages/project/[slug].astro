---
import { useSanityClient } from "astro-sanity";
import i18next, { changeLanguage } from "i18next";
import { projectsQuery } from "../../../lib/queries";
import type { Category, Project, Seo } from "../../../lib/types";
import BlockManager from "../../components/BlockManager.astro";
import SanityImage from "../../components/SanityImage.astro";
import ProjectsLayout from "../../layouts/project.astro";

changeLanguage("en");

export interface Props {
    project: Project;
}
const { project } = Astro.props;
const seo: Omit<Seo, "_type"> = {
    metaTitle: project.title,
    metaDescription: project.description,
    shareImage: project.headerImage,
    isArticle: true,
};
export async function getStaticPaths() {
    const projects: Project[] = await useSanityClient().fetch(projectsQuery, {
        locale: i18next.language,
    });
    return projects.map((p) => ({
        params: { slug: p.slug },
        props: { project: p },
    }));
}
---

<ProjectsLayout colour={project.colour} seo={seo}>
    <header>
        <h1>{project.title}</h1>
        <div class="intro" role="presentation">
            <div role="complementary">
                <h2 class="description">
                    {project.description}
                </h2>

                <div role="none">
                    <span>
                        {
                            new Intl.DateTimeFormat(i18next.language, {
                                month: "long",
                                year: "numeric",
                            }).format(new Date(project.publishedAt))
                        }
                    </span>

                    {
                        project.company && (
                            <>
                                <span>-</span>
                                {project.company.url ? (
                                    <a href={project.company.url}>
                                        {project.company.title}
                                    </a>
                                ) : (
                                    <span>{project.company.title}</span>
                                )}
                            </>
                        )
                    }

                    {
                        project.categories && (
                            <>
                                <span>-</span>
                                {project.categories
                                    .map((c) => c.title)
                                    .join(", ")}
                            </>
                        )
                    }
                </div>
            </div>

            <p role="doc-preface">{project.excerpt}</p>
        </div>
    </header>

    <div role="banner">
        <SanityImage
            alt={`Header image of ${project.title}`}
            src={project.headerImage}
            width={1024}
            height={683}
            fillContainer
        />
    </div>

    <BlockManager value={project.content} />
</ProjectsLayout>

<style lang="scss">
    @import "open-props/media";

    header {
        display: flex;
        flex-direction: column;
        gap: var(--size-2);

        h1 {
            font-size: var(--font-size-6);
            line-height: var(--font-lineheight-1);
        }

        div.intro {
            display: grid;
            grid-template-columns: 1fr;
            gap: var(--size-5);

            > div {
                display: flex;
                flex-direction: column;
                gap: var(--size-2);

                h2.description {
                    margin: 0;
                    font-size: var(--font-size-4);
                    font-weight: var(--font-weight-4);
                    line-height: var(--font-lineheight-0);
                }

                > div {
                    display: flex;
                    flex-direction: row;
                    gap: var(--size-2);
                }
            }
        }
    }

    div[role="banner"] {
        width: 100%;
        height: auto;
        border-radius: var(--radius-2);
        aspect-ratio: 3 / 2;
        overflow: hidden;
        background-color: rgb(var(--projectColor));
    }

    @media (--md-n-above) {
        header {
            div.intro {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    }
</style>
