---
import { useSanityClient } from "astro-sanity";
import i18next, { changeLanguage } from "i18next";

import { homeQuery, projectListQuery } from "../../lib/queries";
import type { Home, Project } from "../../lib/types";

import CallToAction from "../components/CallToAction.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Intro from "../components/Intro.astro";
import ProjectGrid from "../components/ProjectGrid.astro";
import MainLayout from "../layouts/main.astro";

changeLanguage("en");

const projects: Project[] = await useSanityClient().fetch(projectListQuery, {
    locale: i18next.language,
});
const homepage: Home = await useSanityClient().fetch(homeQuery, {
    locale: i18next.language,
});
---

<MainLayout seo={homepage.seo}>
    <Header />

    <main class="main">
        <section class="section grayscale" data-for="intro">
            <Intro homepage={homepage} />
        </section>

        <section class="section grayscale" data-for="projects">
            <ProjectGrid projects={projects} />
        </section>

        <section class="section grayscale" data-for="cta">
            <CallToAction homepage={homepage} />
        </section>

        <Footer />
    </main>
</MainLayout>

<script>
    import { animate, stagger } from "motion";

    animate(
        "main > .section",
        {
            opacity: [0, 0.7],
        },
        {
            duration: 0.75,
            easing: [0.43, 0.13, 0.23, 0.96],
            delay: stagger(0.25),
        }
    );

    // Add BlurBackground custom element (used in Intro.astro & CallToAction.astro)
    class BlurBackground extends HTMLElement {
        constructor() {
            super();

            let div = this,
                divBounds: DOMRect | undefined;

            div?.addEventListener("mousemove", (e) => {
                if (!divBounds) return;

                const x =
                    (e.pageX - window.scrollX - divBounds.x) / divBounds.width;
                const y =
                    (e.pageY - window.scrollY - divBounds.y) / divBounds.height;

                div?.style.setProperty("--cursor-x", String(x));
                div?.style.setProperty("--cursor-y", String(y));
            });

            div?.addEventListener("mouseout", (e) => {
                div?.style.removeProperty("--cursor-x");
                div?.style.removeProperty("--cursor-y");
            });

            const resetBoundingRect = (e?: Event) => {
                divBounds = div?.getBoundingClientRect();
                if (divBounds && process.env.NODE_ENV === "development")
                    console.log({ x: divBounds.x, y: divBounds.y });
            };

            window.addEventListener("scroll", resetBoundingRect);
            window.addEventListener("resize", resetBoundingRect);

            resetBoundingRect();
        }
    }

    customElements.define("blur-background", BlurBackground);
</script>

<style lang="scss">
    .main {
        width: 100vw;
        margin-inline: auto;
        padding-inline: var(--spaces-2);

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: var(--spaces-6);

        > :global(*) {
            width: 100%;
            max-width: 1024px;
        }

        :global(.grayscale) {
            filter: grayscale(100%);
            transition: filter 0.8s cubic-bezier(0.33, 1, 0.68, 1),
                opacity 0.8s cubic-bezier(0.33, 1, 0.68, 1);

            &:hover {
                opacity: 1 !important;
                filter: grayscale(0%);
            }
        }
    }

    .section {
        width: 100%;
        height: auto;
        position: relative;

        // Set for animation
        opacity: 0.7;

        & > :global(*) {
            width: 100%;
            height: 100%;
            position: relative;
        }

        &[data-for="intro"] {
            aspect-ratio: 1.88;
        }
        &[data-for="projects"] {
            aspect-ratio: 1.85;
        }
        &[data-for="cta"] {
            aspect-ratio: 2.11;
        }
    }

    @media only screen and (width <= 640px) {
        .section {
            &[data-for="intro"] {
                aspect-ratio: 2 / 3;
            }
            &[data-for="projects"] {
                aspect-ratio: 2 / 3;
            }
            &[data-for="cta"] {
                aspect-ratio: 1;
            }
        }
    }
</style>
