---
import { Icon } from "astro-icon/components";
import { getEntry } from "astro:content";
import { fade } from "astro:transitions";
import type { Seo } from "../content/config";
import MainLayout from "./main.astro";

export interface Props {
    slug: string;
    hue?: number;
    seo?: Seo;
}
const { hue, seo } = Astro.props;

const { data } = await getEntry("ui", Astro.currentLocale as "en" | "nl");

const EASE_IN_OUT_QUART = "cubic-bezier(0.76, 0, 0.24, 1)";
const slideAnim = {
    forwards: {
        old: [
            {
                name: "astroFadeOut",
                duration: "100ms",
                easing: EASE_IN_OUT_QUART,
                fillMode: "both",
            },
            {
                name: "slideDown",
                duration: "250ms",
                easing: EASE_IN_OUT_QUART,
                fillMode: "both",
            },
        ],
        new: [
            {
                name: "astroFadeIn",
                duration: "250ms",
                easing: EASE_IN_OUT_QUART,
                delay: "30ms",
                fillMode: "both",
            },
            {
                name: "slideUp",
                duration: "250ms",
                easing: EASE_IN_OUT_QUART,
                fillMode: "both",
            },
        ],
    },
    backwards: {
        old: [{ name: "astroFadeOut" }, { name: "slideDown" }],
        new: [{ name: "astroFadeIn" }, { name: "slideUp" }],
    },
};
---

<MainLayout seo={seo}>
    <div>
        <button
            is="back-button"
            class="overlay"
            transition:animate={fade({ duration: "170ms" })}
            aria-hidden></button>

        <button
            is="back-button"
            class="button icon-button"
            aria-label={data["back-title"]}
        >
            <Icon name="ph:x-bold" aria-hidden />
            <span class="sr-only">{data["back"]}</span>
        </button>

        <script src="../../lib/button-component.ts"></script>

        <main class="content-container" transition:animate={slideAnim}>
            <article>
                <slot />
            </article>
        </main>
    </div>
</MainLayout>

<style lang="postcss" define:vars={{ "color-hue": hue ? hue:'inherit' }}>
    .overlay {
        position: fixed;
        inset: 0;
        z-index: var(--layer-1);
        border: none;
        border-radius: 0;
        text-shadow: none;
        background-color: var(--accent-1);
        opacity: 25%;
    }

    .icon-button {
        width: var(--size-8);
        height: var(--size-8);
        padding: 0;

        display: inline-flex;
        align-items: center;
        justify-content: center;

        border-radius: var(--radius-round);
        background-color: var(--accent-1);
        color: var(--text-2);

        position: fixed;
        right: var(--size-3);
        top: var(--size-3);
        z-index: var(--layer-3);

        > svg {
            width: var(--font-size-4);
            height: var(--font-size-4);
        }
    }

    .content-container {
        background-color: var(--surface-1);
        border-top-left-radius: var(--radius-3);
        border-top-right-radius: var(--radius-3);
        margin-top: var(--size-10);
        width: 100%;
        min-height: 100vh;
        position: relative;
        overflow-y: scroll;
        z-index: var(--layer-2);

        &:focus {
            outline: none;
        }

        article {
            width: 100%;
            margin-inline: auto;
            padding-inline: var(--size-3);
            padding-block: var(--size-fluid-7);

            display: flex;
            flex-direction: column;
            align-items: center;
            gap: var(--size-8);

            /* Header image */
            > :global(p:first-of-type) {
                max-inline-size: var(--size-lg);

                :global(:is(img, picture)) {
                    background: var(--color-1);
                }
            }
            > :global(*:not(header, p:first-of-type)) {
                max-inline-size: var(--size-content-2);

                :global(:is(h1, h2, h3, h4, h5, h6)) {
                    padding-top: var(--size-4);
                    margin: 0;
                }
            }

            :global(iframe) {
                border: 1px solid rgba(0, 0, 0, 0.1);
            }
            :global(:is(img, picture, iframe)) {
                width: 100%;
                height: auto;
                aspect-ratio: 5/6;
                border-radius: var(--radius-2);
                overflow: hidden;
                object-fit: cover;
            }

            :global(hr) {
                width: 100%;
                height: 0.125rem;
                background: var(--surface-2);

                margin-block: var(--size-3);
            }

            :global(.astro-code) {
                width: 100%;
                border-radius: var(--radius-2);
                padding-block: var(--size-2);
                padding-inline: var(--size-3);
            }

            @media (--md-n-above) {
                :global(:is(img, iframe)) {
                    aspect-ratio: 3/2;
                }
            }
        }
    }

    @media (--md-n-above) {
        article {
            gap: var(--size-10);
        }
    }
</style>
